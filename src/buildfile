intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
#import impl_libs += libhello%lib{hello}

./: lib{benchmark} liba{benchmark-main}

pub = [dir_path] ../include
pub_hdrs = $pub/{$pub_hdrs}

lib{benchmark}: cxx{* -benchmark_main} hxx{*} $pub/$pub_hdrs
liba{benchmark-main}: cxx{benchmark_main} lib{benchmark}

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root" "-I$src_base/$pub"

obja{*}: cxx.poptions += -DGOOGLE_BENCHMARK_STATIC_BUILD
objs{*}: cxx.poptions += -DGOOGLE_BENCHMARK_SHARED_BUILD

extra_libs =
if($cxx.target.class == 'linux')
  extra_libs += -lrt -lpthread
elif ($cxx.target.class == 'macos')
  extra_libs += -lpthread
elif ($cxx.target.class == 'windows')
  extra_libs += shlwapi.lib

cxx.libs = $extra_libs

# Export options.
#
lib{benchmark*}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root" "-I$src_base/$pub"
  cxx.export.libs = $intf_libs $extra_libs
}

liba{benchmark}: cxx.export.poptions += -DGOOGLE_BENCHMARK_STATIC
libs{benchmark}: cxx.export.poptions += -DGOOGLE_BENCHMARK_SHARED

# lib{benchmark-main} contains main which is not pulled out with msvc because no obj refers to it
# Force include main in the final exe
liba{benchmark-main}: bin.whole = true

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
{
  lib{benchmark}: bin.lib.version = @"-$version.project_id"
  liba{benchmark-main}: bin.lib.version = @"-$version.project_id"
}
else
{
  lib{benchmark}: bin.lib.version = @"-$version.major.$version.minor"
  lib{benchmark-main}: bin.lib.version = @"-$version.major.$version.minor"
}
